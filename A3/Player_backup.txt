#include "Player.hpp"
#include "SceneNode.hpp"
#include "Collider.hpp"
#include "polyroots.hpp"

#include <iostream>
#include <utility>

#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/io.hpp>
#include <glm/gtc/matrix_transform.hpp>

using namespace glm;
using namespace std;

const int Player::MAX_PARTICLES = 10000; // 100000
const int Player::PARTICLES_PER_SECOND = 1000; // 10000
const float Player::PARTICLE_LIFE = 1.0f;

Player::Player( const mat4& init ) : 
	left_foot_ps{ MAX_PARTICLES, PARTICLES_PER_SECOND, PARTICLE_LIFE, vec3( 0.0f, 8.4f, 1.125f ) } 
{
	init_pos = init * init_pos;
	cob_ellipse = mat4{ 1.0f };
	cob_ellipse[0][0] = 1 / BOUNDING_R_X;
	cob_ellipse[1][1] = 1 / BOUNDING_R_Y;
	cob_ellipse[2][2] = 1 / BOUNDING_R_Z;
	cob_r3 = mat4{ 1.0f };
	cob_r3[0][0] = BOUNDING_R_X;
	cob_r3[1][1] = BOUNDING_R_Y;
	cob_r3[2][2] = BOUNDING_R_Z;
	/*
	for( vec4& vert : bounding_ellipse ) {
		vert = init * vert;
		cout << vert << endl;
	}
	*/
} 

vec4 Player::getPosition() { 
	cout << trans * init_pos << endl;
	return trans * init_pos; 
}

const mat4& Player::getTranslation() { return trans; }

vec3 Player::getCameraPosition() {
	switch( dir ) {
		case RunningDirection::forward: return vec3( getPosition() ) + vec3( 0.0f, CAMERA_UP, CAMERA_HORIZ );
		case RunningDirection::backward: return vec3( getPosition() ) + vec3( 0.0f, CAMERA_UP, -CAMERA_HORIZ );
		case RunningDirection::left: return vec3( getPosition() ) + vec3( -CAMERA_HORIZ, CAMERA_UP, 0.0f );
		case RunningDirection::right: return vec3( getPosition() ) + vec3( CAMERA_HORIZ, CAMERA_UP, 0.0f );
	}
}

vec3 Player::getCameraLookAt() {
	return vec3( getPosition() );
}

void Player::switchDirection( RunningDirection new_dir ) { dir = new_dir; }

const glm::mat4& Player::moveForward( int dir, const vector<Collider*>& building_colliders ) {
	vec3 pos = vec3( getPosition() );

	vec3 vel;
	if( dir == 0 ) vel = vec3( -MOVEMENT_SPEED, 0.0f, 0.0f );
	else if( dir == 1 ) vel = vec3( 0.0, 0.0f, -MOVEMENT_SPEED );
	else if( dir == 2 ) vel = vec3( MOVEMENT_SPEED, 0.0f, 0.0f );
	else if( dir == 3 ) vel = vec3( 0.0f, 0.0f, MOVEMENT_SPEED );
	else if( dir == 4 ) vel = vec3( 0.0f, MOVEMENT_SPEED, 0.0f );
	else if( dir == 5 ) vel = vec3( 0.0f, -MOVEMENT_SPEED, 0.0f );

	// Transform velocity vector and polygons by player's bb ellipse cob matrix. Now we are working with a sphere
	pos = mat3( cob_ellipse ) * pos;
	vel = mat3( cob_ellipse ) * vel;

	float min_t = -1, t0, t1;	// range [0, 1] range in which the sphere intersects a polygon
	vec3 min_collision_point;

	for( Collider* building_collider : building_colliders ) {
		building_collider->transformPolys( cob_ellipse );
		const vector< array<vec4, 3> >& polys = building_collider->getPolys(); 
		const vector< array<vec3, 3> >& norm_polys = building_collider->getPolyNorms(); 
		//building_collider.printPolys();

		for( unsigned int i = 0; i < polys.size(); i++ ) {
			// enough to represent a plane
			const vec3 plane_norm = norm_polys[i][0];
			const vec3 plane_point = vec3( polys[i][0] );
			bool in_plane = false;

			// test if swept sphere intersects triangle plane	
			float signed_distance = dot( plane_norm, pos - plane_point );

			if( dot( plane_norm, vel ) == 0 ) {
				// special case: we are in the same plane as the polygon
				if( abs( signed_distance ) > 1.0f ) continue;	// no intersection
				else {
					in_plane = true;
					t0 = 0;	// being in the same plane we are always intersecting the polygon
					t1 = 1;
				}
			}
			else {
				t0 = ( 1 - signed_distance ) / dot( plane_norm, vel );
				t1 = -1 - signed_distance / dot( plane_norm, vel );
				if( ( t0 < 0 || t0 > 1 ) && ( t1 < 0 || t1 > 1 ) ) continue;	// no intersection
				if( t0 > t1 ) swap( t0, t1 );
			}

			// clamp		
			if( t0 < 0 ) t0 = 0;
			if( t0 > 1 ) t0 = 1;
			if( t1 < 0 ) t1 = 0;
			if( t1 > 1 ) t1 = 1;

			vec3 collision_point;
			bool found_collision = false;
			float t = -1;

			if( !in_plane ) {
				// intersecion point: the point on the plane that the sphere will make first contact with when moving along the velocity vector
				const vec3 i_point = ( pos + t0 * vel ) - plane_norm;

				// check if the point is in the polygon
				const vec3 a = vec3( polys[i][0] );
				const vec3 b = vec3( polys[i][1] );
				const vec3 c = vec3( polys[i][2] );

				const vec3 u = b - a;
				const vec3 v = c - a;
				const vec3 n = cross( u, v );
				const vec3 w = i_point - a;
				const float gamma = dot( cross( u, w ), n ) / dot( n, n );
				const float beta = dot( cross( w, v ), n ) / dot( n, n ); 
				const float alpha = 1 - gamma - beta;

				if( alpha >= 0 && alpha <= 1 && beta >=0 && beta <= 1 && gamma >=0 && gamma <= 1 ) {	// in polygon
					t = t0;
					found_collision = true;
					collision_point = i_point;
				}
			}

			if( !found_collision ) {
				float a, b, c;
				double roots[2];
				double min_root = -1;
				int num_roots;
				float vel_sqr_len = pow( length( vel ), 2 );

				// check collision against each *vertex* in the polygon
				// collision occurs any time the squared distance between the swept sphere center and the vertex is 1
				// ( pos + vel * t - poly ) . ( pos + vel * t - poly ) = 0. Solve for t 
				a = vel_sqr_len;		
				for( int j = 0; j < 3; j++ ) {
					vec3 p = vec3( polys[i][j] );
					float b = 2 * dot( vel, pos - p );
					float c = pow( length( p - pos ), 2 ) - 1;
					num_roots = quadraticRoots( a, b, c, roots );
					if( num_roots == 1 ) min_root = roots[0]; 
					else if( num_roots == 2 ) {
						if( roots[0] < 0 ) min_root = roots[1];
						else if( roots[1] < 0 ) min_root = roots[0];
						else min_root = std::min( roots[0], roots[1] );
					}
					if( num_roots > 0 && min_root >= 0 && ( t < 0 || min_root < t ) ) {
						t = min_root;
						found_collision = true;
						collision_point = p;
					}
				}

				// check collision against each *edge* in the polygon
				vec3 edge, base_to_vertex;
				float edge_sqr_len, edge_dot_vel, edge_dot_base_to_vertex;

				/* goes: p1 -> p2, p2 -> p3, p3 -> p1 */
				for( int j = 0; j < 3; j++ ) {
					vec3 p1, p2;
					if( j != 2 ) {	// p1 -> p2, p2 -> p3
						p1 = vec3( polys[i][j] );
						p2 = vec3( polys[i][j+1] );
					}
					else {	// p3 -> p1
						p1 = vec3( polys[i][2] );
						p2 = vec3( polys[i][0] );
					}

					edge = vec3( p2 - p1 );
					base_to_vertex = p1 - pos;
					edge_sqr_len = pow( length( edge ), 2 );
					edge_dot_vel = dot( edge, vel );	
					edge_dot_base_to_vertex = dot( edge, base_to_vertex );

					a = edge_sqr_len * -vel_sqr_len + pow( edge_dot_vel, 2 );
					b = edge_sqr_len * ( 2 * dot( vel, base_to_vertex ) ) - 2 * edge_dot_vel * edge_dot_base_to_vertex;
					c = edge_sqr_len * ( 1 - pow( length( base_to_vertex ), 2 ) ) + pow( edge_dot_base_to_vertex, 2 );
					num_roots = quadraticRoots( a, b, c, roots );
					if( num_roots != 0 ) {
						if( num_roots == 1 ) min_root = roots[0];
						else if( num_roots == 2 ) {
							if( roots[0] < 0 ) min_root = roots[1];
							else if( roots[1] < 0 ) min_root = roots[0];
							else min_root = std::min( roots[0], roots[1] );
						}

						const float f = ( edge_dot_vel * min_root - edge_dot_base_to_vertex ) / edge_sqr_len;
						if( f >= 0 && f <= 1 ) {
							if( min_root >= 0 && ( t < 0 || min_root < t ) ) {
								t = min_root;
								found_collision = true;
								collision_point = vec3( polys[i][0] ) + f * edge;
							}
						}
					}
				}// end for (edge collisions)

			}//end if( !found_collision )

			if( found_collision ) {
				if( min_t < 0 || t < min_t ) {
					min_t = t;
					min_collision_point = collision_point;
				}
			}
		}//end for (all polygon collisions in current collider)
	} // end for (all colliders)

	// handle what happens in there is a collision: we have the collision point (min_collision_point) and the t when it happens (min_t)
	if( min_t >= 0 && min_t <= 1 ) {
		vel = vec3( 0 );
		cout << "collision at: " << cob_r3 * vec4( min_collision_point, 1 ) << " with value: " << min_t << endl;		
	}

	// change of basis back to R3
	vel = mat3( cob_r3 ) * vel;
	trans = translate( trans, vel );
	left_foot_ps.updateTrans( trans );
	return trans;
}

ParticleSystem& Player::getLeftFootParticleSystem() { return left_foot_ps; }


// Works, but I don't understand it
/* 
typedef unsigned int uint32;
#define in(a) ((uint32&) a)

bool checkPointInTriangle( const vec3& point, const vec3& pa, const vec3& pb, const vec3& pc) {
	vec3 e10 = pb-pa;
	vec3 e20 = pc-pa;
	float a = dot( e10, e10 );
	float b = dot( e10, e20 );
	float c = dot( e20, e20 );
	float ac_bb = (a*c)-(b*b);
	vec3 vp = vec3(point.x - pa.x, point.y - pa.y, point.z - pa.z );
	float d = dot( vp, e10 );
	float e = dot( vp, e20 );
	float x = (d*c)-(e*b);
	float y = (e*a)-(d*b);
	float z = x+y-ac_bb;
	return (( in(z)& ~(in(x)|in(y)) ) & 0x80000000);
}
*/
